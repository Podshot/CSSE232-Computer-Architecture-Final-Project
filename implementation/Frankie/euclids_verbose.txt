prep:
	aput@ 2 //int m; m = 2;
	bkac@ //back up shelley's initial value
relprime_loop:
	jfnc 6 //gcd
	cequ 1 //if (gcd(n, m) == 1
	jcmp@ 23 //relprime_end
	spop //restore shelley's initial value
	aadd 1 //m=m+1
	bkac //back up shelley
	swap //put a in front (prep args)
gcd:
	cequ 0 //if (a == 0)
	jimm@ 2
	swap //prep b for return
	jret //return b;
	jcmp@ -3
	bkac //back up mary
gcd_loop:
	jcmp@ 10 //break
	cgre@ //if a > b
	jcmp@ 5 //jump past a=a-b to b=b-a (gcd_2)
	swap
	asub@ //else b=b-a
	cequ 0 //if b == 0
	swap
	jimm@ -8 //gcd_loop
gcd_2
	asub@ //a=a-b
	cequ 0 //if b == 0
	jimm@ -11 //gcd_loop
gcd_end:
	spop@ //pop backup of mary back into mary
	jret //return a
relprime_end:
	spop //put m into mary to prep for return
	
	
	jimm -1 //infinite loop
	
	
kernel:
	load 255 //load input into mary