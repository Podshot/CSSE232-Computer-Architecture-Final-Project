bkra			#back up the ra on the stack before putting the args on the stack so that GCD can get back to relPrime

sput 0 nVal		#put n on the stack
			#if n is large, get it into the accumulator first
				#aput upper(nVal)
				#shfr 8
				#lorr lower(nVal)
				#bkac

aput 2			#put 2 (i.e. mVal) in the accumulator
swap			#put 2 in the backup accumulator

LOOP:
	jfnc 0 GCD	#go to the function in the other file; automatically sets ra to the address of this line

	cequ 0 1		#checks if return value from GCD (which gets stored in the accumulator upon return) is 1 or not. It puts 1 in the comp reg if so, and puts 0 in the comp reg if not.
	jcmp 0 END	#continue in the loop unless GCD returned 1
			#which is to say, break out of the loop if GCD returned 1

	swap		#if GCD didn't return 1, get out of the backup accumulator and into the main accumulator
	aadd 0 1	#add 1 to m
	swap		#put the new m = mOld + 1 back in the backup accumulator so it is the arg for the next time we call GCD
	jump 0 LOOP	#do the loop again

END:
	swap		#get m into the accumulator because it is the return value
	#pop until the addr on top of the stack is the address of relPrime's caller
	rpop		#restore ra to the address of whatever called relPrime
	jret		#jump to wherever called relPrime